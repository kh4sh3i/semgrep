rules:
  - id: cookie-samesite-none
    message: "Detected a cookie options with the `SameSite` flag set to \"None\".
      This is a potential security risk that arises from the way web browsers
      manage cookies. In a typical web application, cookies are used to store
      and transmit session-related data between a client and a server. To
      enhance security, cookies can be marked with the \"SameSite\" attribute,
      which restricts their usage based on the origin of the page that set them.
      This attribute can have three values: \"Strict,\" \"Lax,\" or \"None\". If
      this wasn't intentional, it's recommended to set the the `SameSite`
      attribute of the important cookies (e.g., session cookie) to either
      `Strict` or `Lax`. When `SameSite` is set to \"Strict\", no 3rd party
      cookie will be sent with outgoing requests, this is the most secure and
      private setting but harder to deploy with good usability. Setting it to
      \"Lax\" is the minimum requirement. You can use the Cookie Policy
      Middleware to globally set the `SameSite` attribute. You can then use the
      CookieOptions class when instantiating the cookie, which inherits these
      settings and will require future developers to have to explicitly override
      them on a case-by-case basis if needed. This approach ensures cookies are
      secure by default."
    severity: INFO
    metadata:
      likelihood: LOW
      impact: LOW
      confidence: MEDIUM
      category: security
      subcategory:
        - secure default
      cwe:
        - "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
      display-name: Cookies with SameSite set to None
      functional-categories:
        - web::search::cookie-config::.net
      owasp:
        - A01:2021 - Broken Access Control
      references:
        - https://learn.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-8.0#cookie-policy-middleware
        - https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.cookieoptions
        - https://owasp.org/Top10/A01_2021-Broken_Access_Control
        - https://web.dev/articles/samesite-cookies-explained
      technology:
        - .NET
        - csharp
        - dotnet
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cookie Security
    languages:
      - csharp
    mode: taint
    paths:
      include:
        - Program.cs
        - Startup.cs
        - cookie-samesite-none.cs
    pattern-sources:
      - pattern: SameSiteMode.None
      - pattern: Microsoft.AspNetCore.Http.SameSiteMode.None
    pattern-sinks:
      - exact: false
        pattern-either:
          - pattern: $S.Configure<CookieAuthenticationOptions>(...)
          - pattern: $S.Configure<CookiePolicyOptions>(...)
          - pattern: new CookieAuthenticationOptions(...) {...}
          - pattern: new CookiePolicyOptions(...) {...}
          - patterns:
              - pattern-either:
                  - pattern: $X.MinimumSameSitePolicy = ...;
                  - pattern: $X.SameSite = ...;
              - pattern-not-inside: new CookieAuthenticationOptions(...) {...}
              - pattern-not-inside: new CookiePolicyOptions(...) {...}
              - pattern-not-inside: $S.Configure<CookieAuthenticationOptions>(...)
              - pattern-not-inside: $S.Configure<CookiePolicyOptions>(...)
